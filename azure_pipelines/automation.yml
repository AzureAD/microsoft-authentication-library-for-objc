variables:
  - name: 'repositoryName' # Name of the repository
    value: 'AzureAD/microsoft-authentication-library-for-objc'

schedules:
# daily build will only be triggered if there is any change between the build and last successful build
- cron: "0 4 * * *"
  displayName: Daily 8 pm build
  branches:
    include:
    - dev
- cron: "0 20 * * 0"
  displayName: Weekly Sunday build
  branches:
    include:
    - dev
  always: true

trigger:
  branches:
      include:
      - release/*
      - hotfix/*

pr: none

pool:
  vmImage: 'macOS-13'

jobs:
- job: ui_automation
  displayName: Run MSAL UI automation
  timeoutInMinutes: 360
  cancelTimeoutInMinutes: 5
  workspace:
    clean: all
  
  steps:

  - checkout: self
    clean: true
    submodules: true
    fetchDepth: 1
    persistCredentials: true
    path: s
  
  - task: Bash@3
    displayName: Go to project folder
    inputs:
      targetType: 'inline'
      script: |        
        cd $(Agent.BuildDirectory)/s
  
  - script: 'gem install xcpretty'
    displayName: 'Install xcpretty'
  
  - task: Bash@3
    displayName: Build for testing
    inputs:
      targetType: 'inline'
      script: |        
        echo $(AppleAutomationBase64) > "MSAL/test/automation/conf_encoded.json"
        base64 --decode -i MSAL/test/automation/conf_encoded.json -o MSAL/test/automation/conf.json
        ruby TestRubyFile.rb
        xcodebuild build-for-testing \
          -workspace MSAL.xcworkspace \
          -scheme "MSAL Test Automation (iOS)" \
          -sdk iphonesimulator \
          -destination 'platform=iOS Simulator,name=iPhone 14,OS=16.4' \
          -derivedDataPath 'build' \
          | tee xcodebuild.log \
          | xcpretty -c
  
  - task: Bash@3
    displayName: Run automations
    inputs:
      targetType: 'inline'
      script: |
        ls build/Build/Products/
        xcodebuild test-without-building \
            -xctestrun 'build/Build/Products/MSAL Test Automation (iOS)_iphonesimulator16.4-x86_64.xctestrun' \
            -destination 'platform=iOS Simulator,name=iPhone 14,OS=16.4' \
            -retry-tests-on-failure \
            -parallel-testing-enabled NO \
            -resultBundlePath '$(Agent.BuildDirectory)/s/test_output/report.xcresult'       

  # https://learn.microsoft.com/en-us/azure/devops/pipelines/artifacts/pipeline-artifacts?view=azure-devops&tabs=yaml#q-can-i-delete-pipeline-artifacts-when-re-running-failed-jobs
  - task: PublishPipelineArtifact@1
    condition: succeededOrFailed()
    inputs:
      targetPath: '$(Agent.BuildDirectory)/s/test_output/'
      artifactName: 'TestOutputs Attempt - $(System.StageAttempt)'
      publishLocation: 'pipeline'

  - task: UsePythonVersion@0
    condition: failed()
    displayName: Use Python 3.x

  - bash: python3 -m pip install github3.py==2.0.0
    condition: failed()
    displayName: Install the github3.py REST API client for Python

  - task: PythonScript@0
    displayName: Create Issue if Pipeline fails
    condition: failed()
    inputs:
      scriptSource: inline
      script: |
        import github3
        import requests
        import textwrap
        from pprint import pprint
        from subprocess import run, PIPE

        auth_header = ""
        try:
            auth_header = run(["git", "config", "http.$(Build.Repository.URI).extraheader"], text=True, check=True, stdout=PIPE).stdout.strip()
        except Exception as e:
          pprint(e)
        class HTTPHardcodedHeaderAuth(requests.auth.AuthBase):
            def __call__(self, r):
                r.headers['Authorization'] = auth_header.replace("AUTHORIZATION: ", "")
                return r

        github = github3.GitHub()
        github.session.auth = HTTPHardcodedHeaderAuth()
        github_org, repo = "$(Build.Repository.Name)".split("/")
        
        # Prepare content for github issue
        pipeline_uri = "https://identitydivision.visualstudio.com/IDDP/_build/results?buildId=$(Build.BuildId)&view=logs"
        git_commit = "$(Build.SourceVersionMessage) [$(Build.SourceVersion)] "
        issue_title = "Automation tests failure"
        issue_body = '''@AzureAD/appleidentity \nAutomation failed for [$(repositoryName)]({0}) ran against commit : {1} \n Pipeline URL : [{2}]({2})'''.format('$(Build.Repository.Uri)', git_commit, pipeline_uri) 
        github.create_issue(github_org, repo, issue_title, issue_body, labels=['automation failure'])
  
