# Pipeline will be triggered for PR & any updates on the PR on all branches
pr:
  autoCancel: true
  branches:
    include:
    - '*'
  drafts: true

# Trigger CI for only main/release branches
trigger:
  branches:
    include:
    - main
    - release/*
    exclude:
    - '*'

# Define parallel jobs that run build script for specified targets
jobs:
- job: 'Validate_Pull_Request'
  strategy:
    maxParallel: 2
    matrix:
      IOS_FRAMEWORK: 
        target: "iosFramework iosTestApp sampleIosApp sampleIosAppSwift"
      MAC_FRAMEWORK: 
        target: "macFramework"
  displayName: Validate Pull Request
  pool:
    vmImage: 'macOS-14'
    timeOutInMinutes: 30

  steps:
  - script: |
          /bin/bash -c "sudo xcode-select -s /Applications/Xcode_15.4.app"
    displayName: 'Switch to use Xcode 15.4'
  - task: CmdLine@2
    displayName: Installing dependencies
    inputs:
      script: |
        gem install xcpretty slather bundler -N
      failOnStderr: true
  - checkout: self
    clean: true
    submodules: true
    fetchDepth: 1
    persistCredentials: false
  - task: Bash@3
    displayName: Removing any lingering codecov files. These can cause issues when the xcode version changes
    inputs:
      targetType: 'inline'
      script: |
        find . -name "*.gcda" -print0 | xargs -0 rm
  - task: ComponentGovernanceComponentDetection@0
    inputs:
      alertWarningLevel: Low
  - task: Bash@3
    displayName: Run Build script & check for Errors
    inputs:
      targetType: 'inline'
      script: |
        { output=$(./build.py --target $(target) 2>&1 1>&3-) ;} 3>&1
        final_status=$(<./build/status.txt)
        echo "FINAL STATUS  = ${final_status}"
        echo "POSSIBLE ERRORS: ${output}"
        
        if [ $final_status != "0" ]; then
          echo "Build & Testing Failed! \n ${output}" >&2
        fi
      failOnStderr: true
  - task: Bash@3
    condition: always()
    displayName: Cleanup
    inputs:
      targetType: 'inline'
      script: |
        rm -rf ./build/status.txt
  - task: PublishTestResults@2
    condition: always()
    displayName: Publish Test Report
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '$(Agent.BuildDirectory)/s/build/reports/*'
      failTaskOnFailedTests: true
      testRunTitle: 'Test Run - $(target)'

- job: fetch_pr_labels
  displayName: 'Check for PR Label'
  timeoutInMinutes: 5
  pool:
    vmImage: 'macOS-14'
  steps:
    - script: |
        url="https://api.github.com/repos/$BUILD_REPOSITORY_ID/issues/$SYSTEM_PULLREQUEST_PULLREQUESTNUMBER/labels"

        echo "Fetching labels from $url "

        # Temporary file to store the raw response
        temp_file=$(mktemp)

        # Store the response code and the raw response in separate variables
        response_code=$(curl -s -w "%{http_code}" -o "$temp_file" "$url")
        response_content=$(cat "$temp_file")

        echo "Response code: $response_code"
        echo "Raw response: $response_content"

        if [[ "$response_code" -eq 200 ]]; then
          label_names=$(echo $response_content | jq -r '.[].name' | paste -sd ', ' -)
          echo "##vso[task.setvariable variable=PR_LABELS;isOutput=true]$label_names"
          [ -z "$label_names" ] && echo "PR labels: <empty>" || echo "PR labels: $label_names"
        else
          echo "Request failed with status code: $response_code - Skipping Native Auth E2E tests as a preventive measure"
          echo "##vso[task.setvariable variable=PR_LABELS;isOutput=true]'skip-native-auth-e2e-tests'"
        fi

      name: fetchPrLabels

- job: e2e_test_native_auth_ios
  displayName: 'Run MSAL E2E tests for iOS native auth'
  dependsOn: fetch_pr_labels
  condition: and( succeeded(), not(contains(dependencies.fetch_pr_labels.outputs['fetchPrLabels.PR_LABELS'], 'skip-native-auth-e2e-tests')) )
  timeoutInMinutes: 30
  cancelTimeoutInMinutes: 5
  pool:
    vmImage: 'macOS-14'
  workspace:
    clean: all

  steps:
  - template: templates/tests-with-conf-file.yml
    parameters:
      schema: 'MSAL iOS Native Auth E2E Tests'
      full_path: 'build/Build/Products/MSAL iOS Native Auth E2E Tests_MSAL iOS Native Auth E2E Tests_iphonesimulator17.5-x86_64.xctestrun'
      destination: 'platform=iOS Simulator,name=iPhone 15,OS=17.5'
      sdk: 'iphonesimulator'

- job: e2e_test_native_auth_mac
  displayName: 'Run MSAL E2E tests for macOS native auth'
  dependsOn: fetch_pr_labels
  condition: and( succeeded(), not(contains(dependencies.fetch_pr_labels.outputs['fetchPrLabels.PR_LABELS'], 'skip-native-auth-e2e-tests')) )
  timeoutInMinutes: 30
  cancelTimeoutInMinutes: 5
  pool:
    vmImage: 'macOS-14'
  workspace:
    clean: all

  steps:
  - task: Bash@3
    displayName: Calculate path
    inputs:
      targetType: 'inline'
      script: |
        # Get the macOS version
        macos_version=$(sw_vers -productVersion)
        echo "Mac Version $macos_version"      
        full_path="build/Build/Products/MSAL Mac Native Auth E2E Tests_MSAL Mac Native Auth E2E Tests_macosx$macos_version-x86_64.xctestrun"
        echo "##vso[task.setvariable variable=macos_full_path]$full_path"

  - template: templates/tests-with-conf-file.yml
    parameters:
      schema: 'MSAL Mac Native Auth E2E Tests'
      full_path: $(macos_full_path)
      destination: 'platform=macOS'
      sdk: 'macosx'

- job: 'Validate_SPM_Integration'
  displayName: Validate SPM Integration
  pool:
    vmImage: 'macOS-13'
    timeOutInMinutes: 15
  workspace:
    clean: all

  steps:

  - checkout: self
    clean: true
    submodules: true
    fetchDepth: 1
    persistCredentials: true
    path: s

  - script: |
        /bin/bash -c "sudo xcode-select -s /Applications/Xcode_14.3.app"
    displayName: 'Switch to use Xcode 14.3'

  - task: Bash@3
    displayName: Set variable BRANCH_NAME to a temporary branch
    inputs:
      targetType: 'inline'
      script: |
        BRANCH_NAME_LOCAL="$(Build.SourceBranchName)-temp"
        echo "##vso[task.setvariable variable=BRANCH_NAME]${BRANCH_NAME_LOCAL}"
      
  - task: Bash@3
    displayName: Checkout to temporary branch
    inputs:
      targetType: 'inline'
      script: |
        git checkout -b "${BRANCH_NAME}"

  - task: Bash@3
    displayName: Run SPM integration test script
    inputs:
      targetType: 'inline'
      script: |
        sh spm-integration-test.sh "${BRANCH_NAME}"
    continueOnError: false

  - task: Bash@3
    condition: always()
    displayName: Cleanup
    inputs:
      targetType: 'inline'
      script: 
        cd ../..
        rm -rf "$SAMPLE_APP_TEMP_DIR" archive framework MSAL.zip
        git checkout -- .
        git fetch --quiet
        git switch "$(Build.SourceBranchName)"
        git branch -D "$BRANCH_NAME"
        git push origin --delete "$BRANCH_NAME"

