# Pipeline will be triggered for PR & any updates on the PR on all branches
pr:
  autoCancel: true
  branches:
    include:
    - '*'
  drafts: true

# Trigger CI for only main/release branches
trigger:
  branches:
    include:
    - main
    - release/*
    exclude:
    - '*'

# Define parallel jobs that run build script for specified targets
jobs:
- job: 'Validate_Pull_Request'
  strategy:
    maxParallel: 2
    matrix:
      IOS_FRAMEWORK: 
        target: "iosFramework iosTestApp sampleIosApp sampleIosAppSwift"
      MAC_FRAMEWORK: 
        target: "macFramework"
  displayName: Validate Pull Request
  pool:
    vmImage: 'macOS-13'
    timeOutInMinutes: 30

  steps:
  - script: |
          /bin/bash -c "sudo xcode-select -s /Applications/Xcode_14.3.app"
    displayName: 'Switch to use Xcode 14.3'
  - task: CmdLine@2
    displayName: Installing dependencies
    inputs:
      script: |
        gem install xcpretty slather bundler -N
      failOnStderr: true
  - checkout: self
    clean: true
    submodules: true
    fetchDepth: 1
    persistCredentials: false
  - task: Bash@3
    displayName: Removing any lingering codecov files. These can cause issues when the xcode version changes
    inputs:
      targetType: 'inline'
      script: |
        find . -name "*.gcda" -print0 | xargs -0 rm
  - task: ComponentGovernanceComponentDetection@0
    inputs:
      alertWarningLevel: Low
  - task: Bash@3
    displayName: Run Build script & check for Errors
    inputs:
      targetType: 'inline'
      script: |
        { output=$(./build.py --target $(target) 2>&1 1>&3-) ;} 3>&1
        final_status=$(<./build/status.txt)
        echo "FINAL STATUS  = ${final_status}"
        echo "POSSIBLE ERRORS: ${output}"
        
        if [ $final_status != "0" ]; then
          echo "Build & Testing Failed! \n ${output}" >&2
        fi
      failOnStderr: true
  - task: Bash@3
    condition: always()
    displayName: Cleanup
    inputs:
      targetType: 'inline'
      script: |
        rm -rf ./build/status.txt
  - task: PublishTestResults@2
    condition: always()
    displayName: Publish Test Report
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '$(Agent.BuildDirectory)/s/build/reports/*'
      failTaskOnFailedTests: true
      testRunTitle: 'Test Run - $(target)'

- job: e2e_test_native_auth
  displayName: Run MSAL E2E tests for native auth
  timeoutInMinutes: 30
  cancelTimeoutInMinutes: 5
  workspace:
    clean: all
  
  steps:

  - checkout: self
    clean: true
    submodules: true
    fetchDepth: 1
    persistCredentials: true
    path: s
    
  - task: Bash@3
    displayName: 'Select Xcode version'
    inputs:
      targetType: 'inline'
      script: '/bin/bash -c "sudo xcode-select -s /Applications/Xcode_15.0.1.app"'
  
  - task: Bash@3
    displayName: Go to project folder
    inputs:
      targetType: 'inline'
      script: |
        cd $(Agent.BuildDirectory)/s
  
  - script: 'gem install xcpretty'
    displayName: 'Install xcpretty'


  - task: DownloadSecureFile@1
    name: configuration
    displayName: 'Get Automation conf.json'
    inputs:
      secureFile: 'broker_automation_conf_new_api2.json'
  
  - task: Bash@3
    displayName: Build for testing
    inputs:
      targetType: 'inline'
      script: |
        mv $(configuration.secureFilePath) MSAL/test/automation/conf.json
        ruby TestRubyFile.rb
        xcodebuild build-for-testing \
          -workspace MSAL.xcworkspace \
          -scheme "MSAL iOS Native Auth E2E Tests" \
          -sdk iphonesimulator \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.2' \
          -derivedDataPath 'build' \
          | tee xcodebuild.log \
          | xcpretty -c

  - task: Bash@3
    displayName: Run automations
    inputs:
      targetType: 'inline'
      script: |
        ls build/Build/Products/
        xcodebuild test-without-building \
            -xctestrun 'build/Build/Products/MSAL iOS Native Auth E2E Tests_MSAL iOS Native Auth E2E Tests_iphonesimulator17.0-x86_64.xctestrun' \
            -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.2' \
            -retry-tests-on-failure \
            -parallel-testing-enabled NO \
            -resultBundlePath '$(Agent.BuildDirectory)/s/test_output/report.xcresult'       

  # https://learn.microsoft.com/en-us/azure/devops/pipelines/artifacts/pipeline-artifacts?view=azure-devops&tabs=yaml#q-can-i-delete-pipeline-artifacts-when-re-running-failed-jobs
  - task: PublishPipelineArtifact@1
    condition: succeededOrFailed()
    inputs:
      targetPath: '$(Agent.BuildDirectory)/s/test_output/'
      artifactName: 'TestOutputs Attempt - $(System.StageAttempt)'
      publishLocation: 'pipeline'
