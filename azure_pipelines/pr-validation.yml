# Pipeline will be triggered for PR & any updates on the PR on all branches
pr:
  autoCancel: true
  branches:
    include:
    - '*'
  drafts: true

# Trigger CI for only main/release branches
trigger:
  branches:
    include:
    - main
    - release/*
    exclude:
    - '*'

# Define parallel jobs that run build script for specified targets
jobs:
- job: 'Validate_Pull_Request'
  strategy:
    maxParallel: 3
    matrix:
      IOS_FRAMEWORK: 
        target: "iosFramework iosTestApp sampleIosApp sampleIosAppSwift"
      MAC_FRAMEWORK: 
        target: "macFramework"
      VISION_FRAMEWORK:
        target: "visionOSFramework"
  displayName: Validate Pull Request
  pool:
    vmImage: 'macOS-14'
    timeOutInMinutes: 30

  steps:
  - script: |
          /bin/bash -c "sudo xcode-select -s /Applications/Xcode_15.4.app"
    displayName: 'Switch to use Xcode 15.4'
  - task: CmdLine@2
    displayName: Installing dependencies
    inputs:
      script: |
        gem install xcpretty slather bundler -N
      failOnStderr: true
  - checkout: self
    clean: true
    submodules: true
    fetchDepth: 1
    persistCredentials: false
  - task: Bash@3
    displayName: Removing any lingering codecov files. These can cause issues when the xcode version changes
    inputs:
      targetType: 'inline'
      script: |
        find . -name "*.gcda" -print0 | xargs -0 rm
  - task: ComponentGovernanceComponentDetection@0
    inputs:
      alertWarningLevel: Low
# The following is needed to install the visionOS SDK on macos-14 vm image which
# doesn't have visionOS installed by default.
# TODO: Remove when macos-14-arm64 is supported on ADO.
  - task: Bash@3
    displayName: download visionOS SDK
    inputs:
      targetType: 'inline'
      script: |
        echo $(target)
        if [ $(target) == 'visionOSFramework' ]; then
            echo "Downloading simulator for visionOS"
            sudo xcode-select -s /Applications/Xcode_15.4.app/Contents/Developer
            defaults write com.apple.dt.Xcode AllowUnsupportedVisionOSHost -bool YES
            defaults write com.apple.CoreSimulator AllowUnsupportedVisionOSHost -bool YES
            xcodebuild -downloadPlatform visionOS
        else
            echo "Not visionOS job, no download needed"
        fi
      failOnStderr: false
  - task: Bash@3
    displayName: Run Build script & check for Errors
    inputs:
      targetType: 'inline'
      script: |
        { output=$(./build.py --target $(target) 2>&1 1>&3-) ;} 3>&1
        final_status=$(<./build/status.txt)
        echo "FINAL STATUS  = ${final_status}"
        echo "POSSIBLE ERRORS: ${output}"
        
        if [ $final_status != "0" ]; then
          echo "Build & Testing Failed! \n ${output}" >&2
        fi
      failOnStderr: true
  - task: Bash@3
    condition: always()
    displayName: Cleanup
    inputs:
      targetType: 'inline'
      script: |
        rm -rf ./build/status.txt
  - task: PublishTestResults@2
    condition: always()
    displayName: Publish Test Report
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '$(Agent.BuildDirectory)/s/build/reports/*'
      failTaskOnFailedTests: true
      testRunTitle: 'Test Run - $(target)'

- job: 'Validate_SPM_Integration'
  displayName: Validate SPM Integration
  pool:
    vmImage: 'macOS-13'
    timeOutInMinutes: 15
  workspace:
    clean: all

  steps:

  - checkout: self
    clean: true
    submodules: true
    fetchDepth: 1
    persistCredentials: true
    path: s

  - script: |
        /bin/bash -c "sudo xcode-select -s /Applications/Xcode_14.3.app"
    displayName: 'Switch to use Xcode 14.3'

  - task: Bash@3
    displayName: Set variable BRANCH_NAME to a temporary branch
    inputs:
      targetType: 'inline'
      script: |
        BRANCH_NAME_LOCAL="$(Build.SourceBranchName)-temp"
        echo "##vso[task.setvariable variable=BRANCH_NAME]${BRANCH_NAME_LOCAL}"
      
  - task: Bash@3
    displayName: Checkout to temporary branch
    inputs:
      targetType: 'inline'
      script: |
        git checkout -b "${BRANCH_NAME}"

  - task: Bash@3
    displayName: Run SPM integration test script
    inputs:
      targetType: 'inline'
      script: |
        sh spm-integration-test.sh "${BRANCH_NAME}"
    continueOnError: false

  - task: Bash@3
    condition: always()
    displayName: Cleanup
    inputs:
      targetType: 'inline'
      script: 
        cd ../..
        rm -rf "$SAMPLE_APP_TEMP_DIR" archive framework MSAL.zip
        git checkout -- .
        git fetch --quiet
        git switch "$(Build.SourceBranchName)"
        git branch -D "$BRANCH_NAME"
        git push origin --delete "$BRANCH_NAME"

