variables:
  - name: 'releaseVersion'
    value: null
  - name: 'commonCoreReleaseVersion'
    value: null
  - name: 'frameworkChecksum'
    value: null
  - name: 'repositoryName' # Name of the repository
    value: 'AzureAD/microsoft-authentication-library-for-objc'
  - name: 'repositoryBranch' # Name of the branch where version number will be updated for files that contain version number.
    value: 'master'
  - name: 'GithubServiceConnection' # Service connection name used to connect Github repository
    value: 'MSAL ObjC Service Connection'
  - name: 'docsRepositoryBranch' # Name of the branch where public reference docs will be pushed for github page
    value: 'gh-pages'

trigger:
  branches:
    include:
    - master
  paths:
    include:
    - CHANGELOG.md

pr: none

resources:
  repositories:
  - repository: msalRepository
    type: github
    endpoint: 'GitHub for AzureAD and Azure-Samples (as aadidgit service)'
    name: $(repositoryName)
    ref: $(repositoryBranch)

jobs:
- job: BuildXcFrameworks
  displayName: Build MSAL framework and release
  pool:
    vmImage: 'macOS-11'
    timeOutInMinutes: 20

  steps:
  - checkout: msalRepository
    clean: true
    submodules: true
    fetchDepth: 1
    persistCredentials: false
  - task: Xcode@5
    displayName: Build archive for iOS Simulator
    inputs:
      actions: 'archive'
      sdk: 'iphonesimulator'
      xcWorkspacePath: 'MSAL.xcworkspace'
      scheme: 'MSAL (iOS Framework)'
      packageApp: false
      args: 'SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES -archivePath $(Build.binariesDirectory)/iOS-Sim'
      exportPath: $(Build.binariesDirectory)/iOS-Sim
  - task: Xcode@5
    displayName: Build archive for iOS device
    inputs:
      actions: 'archive'
      sdk: 'iphoneos'
      xcWorkspacePath: 'MSAL.xcworkspace'
      scheme: 'MSAL (iOS Framework)'
      packageApp: false
      destinationTypeOption: 'devices'
      args: 'SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES -archivePath $(Build.binariesDirectory)/iOS'
      exportPath: $(Build.binariesDirectory)/iOS
  - task: Xcode@5
    displayName: Build archive for macOS
    inputs:
      actions: 'archive'
      sdk: 'macosx'
      xcWorkspacePath: 'MSAL.xcworkspace'
      scheme: 'MSAL (Mac Framework)'
      packageApp: false
      args: 'SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES -archivePath $(Build.binariesDirectory)/macOS'
      exportPath: $(Build.binariesDirectory)/macOS
  - task: Bash@3
    displayName: Build xcframework from archives
    inputs:
      workingDirectory: $(Build.binariesDirectory)
      targetType: 'inline'
      script: |
        # Building xcframework
        cd $(Build.BinariesDirectory)
        
        echo "Build Dir = $(pwd)"
        
        xcodebuild -create-xcframework \
        -framework $(Build.binariesDirectory)/iOS.xcarchive/Products/Library/Frameworks/MSAL.framework \
        -framework $(Build.binariesDirectory)/iOS-Sim.xcarchive/Products/Library/Frameworks/MSAL.framework \
        -framework $(Build.binariesDirectory)/macOS.xcarchive/Products/Library/Frameworks/MSAL.framework \
        -output $(Build.binariesDirectory)/MSAL.xcframework
      failOnStderr: true
  - task: ArchiveFiles@2
    displayName: Zip xcframework
    inputs:
      rootFolderOrFile: '$(Build.binariesDirectory)/MSAL.xcframework'
      includeRootFolder: true
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/MSAL.zip'
      replaceExistingArchive: true
  - task: EsrpCodeSigning@1
    inputs:
      ConnectedServiceName: 'MSAL ESRP CodeSign Service Connection'
      FolderPath: '$(Build.ArtifactStagingDirectory)'
      Pattern: 'MSAL.zip'
      signConfigType: 'inlineSignParams'
      SessionTimeout: '60'
      MaxConcurrency: '50'
      MaxRetryAttempts: '5'
      UseMinimatch: false
      inlineOperation: |
        [
          {
            "keyCode": "CP-233039-Apple",
            "operationCode": "iOSSdkSign",
            "parameters": {},
           "toolName": "sign",
            "toolVersion": "1.0"
          }
        ]
  - task: Bash@3
    displayName: Zip and unzip # Task to unzip signed contents and repackage it into MSAL.xcframework
    inputs:
      targetType: 'inline'
      script: |
        unzip MSAL.zip -d MSAL.xcframework
        rm MSAL.zip
        zip -r MSAL.zip MSAL.xcframework
      workingDirectory: '$(Build.ArtifactStagingDirectory)'
      failOnStderr: true
  - task: Bash@3
    displayName: Calculate checksum | extract release version from changelog
    inputs:
      targetType: 'inline'
      script: |
        chksm=$(shasum -a 256 $(Build.ArtifactStagingDirectory)/MSAL.zip | cut -d ' ' -f 1)
        echo "##vso[task.setvariable variable=frameworkChecksum]${chksm}"
        
        #Regex for semver versioning
        ver=$(egrep -om1 '\[((0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)\]' CHANGELOG.md | sed -E -e "s/\[|\]//g")
        echo "##vso[task.setvariable variable=releaseVersion]${ver}"
      workingDirectory: '$(Build.SourcesDirectory)'
      failOnStderr: true
      noProfile: false
      noRc: false
  - task: Shellpp@0
    displayName: Generating release archive zips
    inputs:
      type: 'FilePath'
      scriptPath: 'ReleaseArchive.sh'
      args: '$(releaseVersion) $(Build.ArtifactStagingDirectory)'
  - task: Bash@3
    displayName: Common Core - extract release version from changelog | Build release notes
    inputs:
      targetType: 'inline'
      script: |
        #Regex for semver versioning
        cc_ver=$(egrep -om1 '((0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)' MSAL/IdentityCore/changelog.txt)
        echo "##vso[task.setvariable variable=commonCoreReleaseVersion]${cc_ver}"

        chlg="## Release Notes"$'\n'
        if [ ! -e "MSAL/IdentityCore/changelog.txt" ]; then
          echo "CHANGELOG NOT FOUND!"
        else
          fl=0
          while read p; do
            if [[ "$p" =~ 'Version' ]]; then
              fl=$((fl + 1))
              if [ $fl -gt 1 ]
              then
                  break
              fi
            fi

            if [[ ($fl -eq 1)  && !("$p" =~ ^\*\s+) ]]; then
              chlg="$chlg"$'\n'"$p"
            fi
          done < "MSAL/IdentityCore/changelog.txt"
        fi
        echo "chlg = ${chlg}"
        echo "${chlg}" > cc-release-notes.md

      workingDirectory: '$(Build.SourcesDirectory)'
      failOnStderr: true
      noProfile: false
      noRc: false
  - task: GitHubRelease@1
    displayName: Generate Common Core Github Release
    inputs:
      gitHubConnection: '$(GithubServiceConnection)'
      repositoryName: 'AzureAD/microsoft-authentication-library-common-for-objc'
      action: 'create'
      target: 'master'
      tagSource: 'userSpecifiedTag'
      tag: '$(commonCoreReleaseVersion)'
      title: '$(commonCoreReleaseVersion)'
      releaseNotesFilePath: 'cc-release-notes.md'
      changeLogCompareToRelease: 'lastFullRelease'
      changeLogType: 'issueBased'
      assets: |
        *.abcd
  - task: InstallSSHKey@0
    displayName: Install SSH Key for MSAL Github Repo
    inputs:
      knownHostsEntry: '$(sshKnownHosts)'
      sshPublicKey: '$(sshPublicKey)'
      sshKeySecureFile: 'msal_objc_private_key'
      addEntryToConfig: true
      configHostAlias: 'ADO Release Pipeline Public Key'
      configHostname: 'github.com'
  - task: Bash@3
    displayName: Update package.swift with url & checksum & git push 
    inputs:
      targetType: 'inline'
      script: |
        rm -rf cc-release-notes.md
        ssh-keyscan github.com | tee -a ~/.ssh/known_hosts
        git remote set-url origin git@github.com:$(repositoryName).git

        authorName=$(git log -1 --pretty=format:'%an')
        authorEmail=$(git log -1 --pretty=format:'%ae')
        git config --global user.email "${authorEmail}"
        git config --global user.name "${authorName}"

        git fetch origin $(repositoryBranch) -q
        git checkout FETCH_HEAD -q
        git checkout -b update-package-for-$(releaseVersion) -q
        
        if [ ! -e Package.swift ]; then
            echo -e "// swift-tools-version:5.3\n" >> Package.swift
            cat >> Package.swift << EOF
        import PackageDescription

        let package = Package(
          name: "MSAL",
          platforms: [
                .macOS(.v10_12),.iOS(.v11)
          ],
          products: [
              .library(
                  name: "MSAL",
                  targets: ["MSAL"]),
          ],
          targets: [
              .binaryTarget(name: "MSAL", url: "https://github.com/$(repositoryName)/releases/download/releaseTag1.2.3/MSAL.zip", checksum: "abcdefabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234")
          ]
        )
        EOF
        fi
        perl -i -pe's/checksum:\s+\"[\da-fA-F]{64}\"/checksum: \"$(frameworkChecksum)\"/' Package.swift
        perl -i -pe's/releases\/download\/[0-9a-zA-Z\.].+\//releases\/download\/$(releaseVersion)\//' Package.swift
        perl -i -pe's/s\.version\s+=\s+".*"/s.version      = \"$(releaseVersion)\"/' MSAL.podspec
        plutil -replace CFBundleShortVersionString -string $(releaseVersion) MSAL/resources/ios/Info.plist
        plutil -replace CFBundleShortVersionString -string $(releaseVersion) MSAL/resources/mac/Info.plist
        majorVer=$(echo $(releaseVersion) | cut -d"." -f1)
        minorVer=$(echo $(releaseVersion) | cut -d"." -f2)
        patchVer=$(echo $(releaseVersion) | cut -d"." -f3)

        perl -i -pe"s/MSAL_VER_HIGH\s+.*$/MSAL_VER_HIGH       $majorVer/" MSAL/src/MSAL_Internal.h
        perl -i -pe"s/MSAL_VER_LOW\s+.*$/MSAL_VER_LOW        $minorVer/" MSAL/src/MSAL_Internal.h
        perl -i -pe"s/MSAL_VER_PATCH\s+.*$/MSAL_VER_PATCH      $patchVer/" MSAL/src/MSAL_Internal.h

        git add Package.swift
        git add MSAL.podspec
        git add MSAL/resources/ios/Info.plist
        git add MSAL/resources/mac/Info.plist
        git add MSAL/src/MSAL_Internal.h
        
        author=$(git log -1 --pretty=format:'%an <%ae>')
        git commit -a -m "Updating MSAL framework checksum & url for $(releaseVersion) [skip ci]" -q --author="${author}"
        
        git checkout $(repositoryBranch) -q
        git merge update-package-for-$(releaseVersion) -q
        git push origin $(repositoryBranch) -q
        git branch -d update-package-for-$(releaseVersion) -q
      workingDirectory: '$(Build.SourcesDirectory)'
      failOnStderr: false
      noProfile: false
      noRc: false
  - task: Bash@3
    displayName: Build release notes
    inputs:
      targetType: 'inline'
      script: |
        chlg="## Release Notes"$'\n'
        if [ ! -e CHANGELOG.md ]; then
          echo "CHANGELOG NOT FOUND!"
        else
          fl=0
        while read p; do
            if [[ $p =~ ^\#\#.*$ ]]; then
                fl=$((fl + 1))
                if [ $fl -gt 1 ]
                then
                    break
                fi
            fi

            if [[ ($fl -eq 1)  && !($p =~ ^\#\#) ]]; then
                chlg="$chlg"$'\n'"$p"
            fi
        done <CHANGELOG.md
        fi
        echo "chlg = ${chlg}"
        echo "${chlg}" > release-notes.md

      workingDirectory: '$(Build.SourcesDirectory)'
      failOnStderr: true
      noProfile: false
      noRc: false
  - task: GitHubRelease@1
    displayName: Generate MSAL Github Release
    inputs:
      gitHubConnection: '$(GithubServiceConnection)'
      repositoryName: '$(repositoryName)'
      action: 'create'
      target: '$(repositoryBranch)'
      tagSource: 'userSpecifiedTag'
      tag: '$(releaseVersion)'
      title: '$(releaseVersion)'
      releaseNotesFilePath: 'release-notes.md'
      assets: |
        $(Build.ArtifactStagingDirectory)/*.zip
        $(Build.ArtifactStagingDirectory)/*.tar.gz
      changeLogCompareToRelease: 'lastFullRelease'
      changeLogType: 'issueBased'
  - task: Bash@3
    displayName: Push pod to Cocoapods
    inputs:
      targetType: 'inline'
      script: |
        # Release to CocoaPods
        pod trunk push --use-libraries --allow-warnings MSAL.podspec
        #pod trunk me
      workingDirectory: '$(Build.SourcesDirectory)'
    env:
      COCOAPODS_TRUNK_TOKEN: $(COCOAPODS_TRUNK_TOKEN)
  - task: Bash@3
    displayName: Build MSAL docs via Jazzy
    inputs:
      filePath: 'build_docs.sh'
  - task: Bash@3
    displayName: Push docs to github page for repository 
    inputs:
      targetType: 'inline'
      script: |
        # NOTE : This should be the last step since it changes branch from master to $(docsRepositoryBranch)
        if [ ! -d "docs.temp" ]; then
            echo "Docs were not generated in previous step!"
        else
            authorName=$(git log -1 --pretty=format:'%an')
            authorEmail=$(git log -1 --pretty=format:'%ae')
            git config --global user.email "${authorEmail}"
            git config --global user.name "${authorName}"

            author=$(git log -1 --pretty=format:'%an <%ae>')
            # Create a temp branch to cherry pick doc changes
            git checkout -b 'update-docs-for-release-$(releaseVersion)'
            git add docs.temp/docs/*
            git commit -m 'adding docs for release' --author="${author}" --status
            
            # Cleanup
            rm -rf docs.temp
            git fetch origin $(docsRepositoryBranch)
            git checkout FETCH_HEAD
            git checkout $(docsRepositoryBranch)
            git clean -fd
            
            # Get previously commited changes for docs
            git cherry-pick --strategy-option theirs "update-docs-for-release-$(releaseVersion)"
            
            # Copy files in docs.temp folder to root
            \cp -r docs.temp/docs/* .
        
            # Push changes to docsRepositoryBranch branch
            git add -A
            git commit -m 'Update docs for release $(releaseVersion)' --status  --author="${author}"
            git push origin $(docsRepositoryBranch)
        fi
      workingDirectory: '$(Build.SourcesDirectory)'
      failOnStderr: false
      noProfile: false
      noRc: false
